namespace CSharpFunctionalExtensions.Linq;

/// <summary>
/// Materialize extension methods for <see cref="IEnumerable{T}"/>.
/// </summary>
public static class ToNonEmpty
{
    /// <summary>
    /// Converts the sequence into a non-empty list, returning a failure result if the sequence is empty.
    /// </summary>
    /// <typeparam name="T">The type of elements in the source sequence.</typeparam>
    /// <param name="source">The sequence to convert to a non-empty list.</param>
    /// <param name="errorMessage">The error message to return if the sequence is empty.</param>
    /// <returns>
    /// A <see cref="Result{List{T}}"/> containing the non-empty list if the sequence is not empty, or a failure result with the provided error message if the sequence is empty.
    /// </returns>
    public static Result<List<T>> ToNonEmptyList<T>(this IEnumerable<T> source, string errorMessage = "Sequence contains no elements") => source.MaterializeList() switch
    {
        { Count: 0 } => Result.Failure<List<T>>(errorMessage),
        var result => result
    };

    /// <summary>
    /// Converts the sequence into a non-empty list, returning a failure result with the provided error if the sequence is empty.
    /// </summary>
    /// <typeparam name="T">The type of elements in the source sequence.</typeparam>
    /// <typeparam name="TE">The type of the error value.</typeparam>
    /// <param name="source">The sequence to convert to a non-empty list.</param>
    /// <param name="error">The error value to return if the sequence is empty.</param>
    /// <returns>
    /// A <see cref="Result{List{T}, TE}"/> containing the non-empty list if the sequence is not empty, or a failure result with the provided error value if the sequence is empty.
    /// </returns>
    public static Result<List<T>, TE> ToNonEmptyList<T, TE>(this IEnumerable<T> source, TE error) => source.MaterializeList() switch
    {
        { Count: 0 } => Result.Failure<List<T>, TE>(error),
        var result => result
    };

    /// <summary>
    /// Converts the sequence into a non-empty list, returning a failure result with the error generated by the provided factory if the sequence is empty.
    /// </summary>
    /// <typeparam name="T">The type of elements in the source sequence.</typeparam>
    /// <typeparam name="TE">The type of the error value.</typeparam>
    /// <param name="source">The sequence to convert to a non-empty list.</param>
    /// <param name="errorFactory">A function that generates the error value if the sequence is empty.</param>
    /// <returns>
    /// A <see cref="Result{List{T}, TE}"/> containing the non-empty list if the sequence is not empty, or a failure result with the error value produced by <paramref name="errorFactory"/> if the sequence is empty.
    /// </returns>
    public static Result<List<T>, TE> ToNonEmptyList<T, TE>(this IEnumerable<T> source, Func<TE> errorFactory) => source.MaterializeList() switch
    {
        { Count: 0 } => Result.Failure<List<T>, TE>(errorFactory()),
        var result => result
    };

    /// <summary>
    /// Converts the sequence into a non-empty list, returning a <see cref="Maybe{List{T}}"/> that contains the list if the sequence is not empty, or <see cref="Maybe{List{T}}.None"/> if the sequence is empty.
    /// </summary>
    /// <typeparam name="T">The type of elements in the source sequence.</typeparam>
    /// <param name="source">The sequence to convert to a non-empty list.</param>
    /// <returns>
    /// A <see cref="Maybe{List{T}}"/> containing the non-empty list if the sequence is not empty, or <see cref="Maybe{List{T}}.None"/> if the sequence is empty.
    /// </returns>
    public static Maybe<List<T>> MaybeToNonEmptyList<T>(this IEnumerable<T> source) => source.MaterializeList() switch
    {
        { Count: 0 } => Maybe.None,
        var result => result
    };
}